#######################################################################################
# Include this to get access to a common set of rules for reuse in transform projects.
# include ../../.make.defaults
#
# Before including, the following must be defined:
# REPOROOT points to the top of the git repository. 
# 	For example REPOROOT=../../..

# Targets defined here use double colon so can be overriden
#
# Reusable rules begin with '.'. To reuse without modification, for example,
# define your local Makefile rule as follows:
# clean: .clean
# To augment the the clean rule
# clean: .clean
# 	rm -rf other-stuff
#
#######################################################################################
SHELL=/bin/bash
# Command to run python 
PYTHON=python
PIP=$(PYTHON) -m pip
# Command to run pytest
PYTEST=pytest -s
PYTHON_VERSION=$(shell $(PYTHON) --version)
ABS_REPOROOT=$(shell (cd $(REPOROOT); pwd))
DOCKER_FILE?=Dockerfile
DOCKER_NAME?=data-prep-lab
DOCKER?=docker
DOCKER_HOSTNAME?=quay.io
DOCKER_NAMESPACE ?= dataprep1
DOCKER_REGISTRY_USER?=$(DPL_DOCKER_REGISTRY_USER)
DOCKER_REGISTRY_KEY?=$(DPL_DOCKER_REGISTRY_KEY)
DOCKER_REGISTRY_ENDPOINT?=$(DOCKER_HOSTNAME)/$(DOCKER_NAMESPACE)/$(DOCKER_NAME)
include $(REPOROOT)/.make.versions

#######################################################################################
# Lists all targets and optional help text found in the target.
# Adapted from https://stackoverflow.com/a/65243296/45375
# and modified to support help at the top or middle of the recursive tree and at 
# the leaves (the head and tail piece).
.PHONY: help
.newhelp::
	# Expects a line of the following in the rule
	@printf "%-15s %s\n" "Target" "Description"
	@printf "%-15s %s\n" "--------------" "------------------------"
	@make -pqR : 2>/dev/null  | grep '@# Help:' | grep -v make | grep -v IGNORE | sed -e 's/.*Help://' -e 's/[ 	]*//' | \
		awk -F, '{printf("%-15s%s\n",$$1,$$2)}'

help::
	@printf "%-20s %s\n" "Target" "Description"
	@printf "%-20s %s\n" "------" "-----------"
	@export submakes=$$(find ./* -mindepth 1 -maxdepth 1 -name Makefile);	\
	make -pqR : 2>/dev/null \
		| awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' \
		| sort \
		| egrep -v -e '^[^[:alnum:]]' -e '^$@$$' \
		| xargs -I _ sh -c 'printf "%-20s " _; make _ -nB 2>/dev/null | (grep -i "^# Help:" || echo "") \
		| if [ -z "$$submakes" ]; then	\
			tail -1;		\
		else				\
			 head -1;		\
		fi				\
		| sed "s/^# Help: //g"' | uniq


#################################################################################################################
#
# This provides common support for all Makefiles in the project. 
# It enables the processing of  a common set of rules on all sub-projects underneath this directory.  
# Currently, the common/standardized set of rules are as follows and supported by makefile.include
#
# clean:
# setup: 
# build:
# test:
#
# When finally getting to a makefile that requires a rule implementation, for example to test the build,
# that makefile should override/implement the rule to meet its needs.  Such a rule may continue to recurse
# using "$(MAKE) <rule>-recurse", for example "$(MAKE) test-recurse". 
#
# Each rule is called recursively on sub-directories and if a similar inclusion is done in the sub-Makefiles,
# the rules will be applied/executed recursively in their sub-directories. By default, sub-directories
# are traversed in lexigraphic order.  If you need to control the ordering, create a .make.subdirs
# listing the sub-directories to process and their order.

# Rule to recurse into subdirectories.  
# Usage: $(MAKE) RULE=yourrule .recurse
.PHONY: .recurse
.recurse:: 
	@if [ -z "$(RULE)" ]; then		\
		echo RULE must be specified to use the .recurse target;	\
		exit 1;				\
	fi
	@if [ -e .make.subdirs ]; then		\
	    SUB_MAKE_DIRS=$$(cat .make.subdirs | sed -e 's/^#.*//' -e 's/ //g') ;	\
	    if [ -z "$$SUB_MAKE_DIRS" ]; then	\
		SUB_MAKE_DIRS=$$(echo */ | sort);	\
	    fi;					\
	else					\
	    SUB_MAKE_DIRS=$$(echo */ | sort);	\
	fi;					\
	echo SUB_MAKE_DIRS=$$SUB_MAKE_DIRS;	\
	if [ ! -z "$$SUB_MAKE_DIRS" ]; then	\
	    for i in $$SUB_MAKE_DIRS; do	\
		if [ -e $$i/Makefile ]; then	\
		    echo Using recursive $(RULE) rule in $$i;	\
		    (cd $$i; $(MAKE) $(RULE));	\
		    status=$$?;			\
		    if [ $$status -ne 0 ]; then	\
			exit $$status;		\
		    fi;				\
		else				\
		    echo No Makefile found in $$i. Skipping.;	\
		fi;				\
	    done;				\
	fi

PWD=$(shell pwd)
# This rule allows sub-directories to override/define rule X for each X-recurse rule above.
# See https://stackoverflow.com/questions/11958626/make-file-warning-overriding-commands-for-target
%:: .%-recurse
	@echo Finished executing rule $@ recursively in $(PWD) > /dev/null	

#######################################################################################

check_defined = \
	$(strip $(foreach 1,$1, \
	$(call __check_defined,$1,$(strip $(value 2)))))
__check_defined = \
	$(if $(value $1),, \
	$(error Undefined $1$(if $2, ($2))))

.PHONY: .check_python_version
.check_python_version::
	@version=$$(echo $(PYTHON_VERSION) | sed -e 's/Python[ ]*//');  \
	major=$$(echo $$version | awk -F. '{print $$1}');	       \
	minor=$$(echo $$version | awk -F. '{print $$2}');	       \
	if [ $$major -lt 3 -o $$minor -lt 10 -o $$minor -gt 11 ]; then  \
		echo Python 3.10 or 3.11 is required, but got $$version;	\
		echo Try overriding PYTHON=$(PYTHON).  For example, "'"make PYTHON=python3.10" ...'";   \
		exit 1;						 \
	fi


.PHONY: .defaults.clean
.defaults.clean:: 
	@# Help: Clean up the virtual environment.
	rm -rf venv

.PHONY: .defaults.image
.defaults.image:: # Must be called with a DOCKER_IMAGE= settings.
	@# Help: Create the docker image $(DOCKER_IMAGE)
	$(DOCKER) build -t $(DOCKER_IMAGE) \
		--build-arg BUILD_DATE=$(shell date -u +'%Y-%m-%dT%H:%M:%SZ')  \
		--build-arg GIT_COMMIT=$(shell git log -1 --format=%h)  . 

.PHONY: .defaults.lib-src-image
.defaults.lib-src-image:: # Must be called with a DOCKER_IMAGE= settings.
	@# Help: Build the $(DOCKER_IMAGE) using the $(DOCKER_FILE), requirements.txt and install data-prep-lib source
	rm -rf data-processing-lib
	mkdir data-processing-lib	       
	# Copy with -p so docker cachine works when copying this into the image
	cp -p -R $(REPOROOT)/data-processing-lib/src data-processing-lib
	cp -p  $(REPOROOT)/data-processing-lib/pyproject.toml data-processing-lib
	cp -p  $(REPOROOT)/data-processing-lib/README.md data-processing-lib
	$(MAKE) DOCKER_IMAGE=$(DOCKER_IMAGE) .defaults.image
	rm -rf data-processing-lib


.PHONY: .defaults.install-lib-src
.defaults.lib-src-venv:: .defaults.venv
	@# Help: Install the source from the data processing library for $(PYTHON)
	@echo Installing source from data processing library for venv
	source venv/bin/activate;				      	\
	pip install pytest;						\
	pip uninstall -y data-prep-lab;		 			\
	pip install  -e $(REPOROOT)/data-processing-lib/;	       	\
	if [ $$? -eq 0 ]; then  					\
		echo Installed source from data processing library for `which $(PYTHON)`;       \
	else 								\
		echo ERROR installing source into `which $(PYTHON)`;    \
	fi  

.PHONY: .defaults.test-src
.defaults.test-src:: 
	@# Help: Run pytest on the test directory inside the venv 
	source venv/bin/activate;       \
	export PYTHONPATH=../src;       \
	cd test; $(PYTEST) .

# This is small convenience and the image itself must already be created.
.PHONY: .defaults.test-image-pytest
.defaults.test-image-pytest:: 
	# Put this 2nd so its help showss up instead of .defaults.image help
	@# Help: Test an $(DOCKER_IMAGE) use test source inside the image. 
	$(DOCKER) run -t --rm $(DOCKER_IMAGE) pytest -s test 
	
# This expects the image to already be built and so does not depending on .defaults.publish.
# This allows others to define their own image building prior to publishing.
.PHONY: .defaults.publish
.defaults.publish:: 
	@# Help: Publish the $(DOCKER_IMAGE) to $(DOCKER_HOSTNAME) container registry
	$(DOCKER) logout $(DOCKER_HOSTNAME)
	$(DOCKER) login $(DOCKER_HOSTNAME) -u '$(DOCKER_REGISTRY_USER)' -p '$(DOCKER_REGISTRY_KEY)'
	$(DOCKER) push  $(DOCKER_IMAGE)

# Create the local virtual environment, assuming python is already installed and available
# We upgrade pip as that seems to be required by watson_nlp
# We install wheel, because it seems to be required for fasttext install on redhat.
# We use "pip" instead of "$(PIP)" below because otherwise if the user has overriddent PYTHON
# they will end up installing into that PYTHON and NOT the venv.
.PHONY: .defaults.venv
.defaults.venv::	requirements.txt .check_python_version
	@# Help: Create the virtual environment using requirements.txt
	$(PYTHON) -m venv venv
	@source venv/bin/activate;		\
	pip install --upgrade pip;		\
	pip install wheel;			\
	pip install -r requirements.txt;	\

.PHONY: .defaults.check.installed
.defaults.check.installed::
	@installed=$$(which $(CHECK_RUNNABLE));		\
	if [ -z "$$installed" ]; then			\
	    echo $(CHECK_RUNNABLE) must be installed;	\
	    exit 1;					\
	fi

.PHONY: .defaults.minio.check
.defaults.minio.check::
	@# Help: Check that minio and the mc CLI is installed. 
	$(MAKE) CHECK_RUNNABLE=minio .defaults.check.installed
	$(MAKE) CHECK_RUNNABLE=mc .defaults.check.installed

.PHONY: .defaults.minio.start
.defaults.minio.start::
	$(MAKE) .defaults.minio.check
	@# Help: Start the minio server and alias to local
	minio server start &
	mc admin info local
	mc alias set local http://127.0.0.1:9000 minioadmin minioadmin

.PHONY: .defaults.minio.load-all
.defaults.minio.load-all::
	$(MAKE) .defaults.minio.check
	@# Help: Load the test data from across the repo into a local minio server 
	mc mb  local/test
	mc cp --recursive $(REPOROOT)/tools/ingest2parquet/test-data/input/ local/test/ingest2parquet/input
	mc cp --recursive $(REPOROOT)/transforms/code/code_quality/test-data/input/ local/test/code_quality/input
	mc cp --recursive $(REPOROOT)/transforms/code/proglang_select/test-data/input/ local/test/proglang_select/input
	mc cp --recursive $(REPOROOT)/transforms/code/proglang_select/test-data/languages/ local/test/proglang_select/languages
	mc cp --recursive $(REPOROOT)/transforms/code/malware/test-data/input/ local/test/malware/input
	mc cp --recursive $(REPOROOT)/transforms/language/doc_quality/test-data/input/ local/test/doc_quality/input
	mc cp --recursive $(REPOROOT)/transforms/language/language_id/test-data/input/ local/test/language_id/input
	mc cp --recursive $(REPOROOT)/transforms/universal/blocklist/test-data/input/ local/test/blocklist/input
	mc cp --recursive $(REPOROOT)/transforms/universal/doc_id/test-data/input/ local/test/doc_id/input
	mc cp --recursive $(REPOROOT)/transforms/universal/ededup/test-data/input/ local/test/ededup/input
	mc cp --recursive $(REPOROOT)/transforms/universal/fdedup/test-data/input/ local/test/fdedup/input
	mc cp --recursive $(REPOROOT)/transforms/universal/filter/test-data/input/ local/test/filter/input
	mc cp --recursive $(REPOROOT)/transforms/universal/noop/test-data/input/ local/test/noop/input
	mc cp --recursive $(REPOROOT)/transforms/universal/tokenization/test-data/ds01/input/ local/test/tokenization/ds01/input
	mc cp --recursive $(REPOROOT)/transforms/universal/tokenization/test-data/ds02/input/ local/test/tokenization/ds02/input


