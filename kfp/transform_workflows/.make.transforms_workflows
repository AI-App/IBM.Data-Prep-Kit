include ${REPOROOT}/.make.versions
include ${REPOROOT}/kfp/requirements.env

# Include the common rules.
# Use "make help" to see them.
include ${REPOROOT}/.make.defaults

DOCKER_REPO ?= ""

define set_env_var
	$(eval export $(1)=$(2))
endef

.PHONY: .transforms_workflows.reconcile-requirement
.transforms_workflows.reconcile-requirement:
	sed -i.back "s%${DOCKER_IMAGE_NAME}:.*%${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}\"%" ${PIPELINE_FILE}
	sed -i.back "s/kfp-data-processing:.*/kfp-data-processing:${KFP_DOCKER_VERSION}\"/" ${PIPELINE_FILE}

.PHONY: .transforms_workflows.compile-pipeline
.transforms_workflows.compile-pipeline:
	. ${VENV_ACTIVATE} && ${PYTHON} ${WF_NAME}.py

%.yaml: %.py ${REPOROOT}/.make.versions ${REPOROOT}/kfp/requirements.env
	make .transforms_workflows.reconcile-requirement PIPELINE_FILE=$<
	make .transforms_workflows.compile-pipeline WF_NAME=$(shell (basename $< .py))

.PHONY: .transforms_workflows.test-pipeline
.transforms_workflows.test-pipeline:
	$(call set_env_var, CLUSTER_EXISTS, $(shell kind get clusters | grep ${KIND_CLUSTER_NAME}))
	@if [ -z ${CLUSTER_EXISTS} ]; then \
		cd ${REPOROOT} && make setup;  \
	fi
	. ${VENV_ACTIVATE}  && ${PYTHON} ${REPOROOT}/kfp/transform_workflows/hack/test_pipeline.py -p ${CURDIR}/${PIPELINE_FILE}

${VENV_ACTIVATE}: ${REPOROOT}/.make.versions ${REPOROOT}/kfp/requirements.env ${REPOROOT}/kfp/kfp_ray_components/requirements.txt
	@# Help: Create the virtual environment common to all workflows
	sed -i.back "s/data-prep-lab-kfp==[0-9].*/data-prep-lab-kfp==${DPL_LIB_KFP_VERSION}/" ${REPOROOT}/kfp/kfp_ray_components/requirements.txt
	rm -rf ${REPOROOT}/kfp/transform_workflows/venv
	$(PYTHON) -m venv ${REPOROOT}/kfp/transform_workflows/venv
	. ${VENV_ACTIVATE}; 	\
	pip install kfp==${KFP} --extra-index-url https://pypi.org/simple \
	pip install -e ${REPOROOT}/kfp/kfp_support_lib
	
.PHONY: .transforms_workflows.clean
.transforms_workflows.clean:
	rm -rf "*_wf.yaml" || true

