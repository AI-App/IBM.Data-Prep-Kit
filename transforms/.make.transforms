# Include this to get access to a common set of rules for reuse in transform projects.
# include ../../.make.transforms
#
# Before including, the following must be defined:
# REPOROOT points to the top of the git repository. 
# 	For example REPOROOT=../../..
# TRANSFORM_NAME defines the name of the transform and is used to derive
#  	DOCKER_IMAGE_NAME and TRANSFORM_SRC_FILE if not already defined.

# Optional inputs (that have defaults)
# TRANSFORM_SRC_FILE is the base name of the python source file containing the main()
#	that is used to launch the transform in Ray.  
#       By convention this name defaults to $(TRANSFORM_NAME)_transform.py.
#	This file is then assumed to be in the home dir of the docker image and
#	can be run with "python $(TRANSFORM_SRC_FILE) --help"
# DOCKER_IMAGE_NAME is the name of the docker image.  
#	By default its value is $(TRANSFORM_NAME).
#
# Targets defined here use double colon so can be overriden
#
# Reusable rules begin with '.'. To reuse without modification, for example,
# define your local Makefile rule as follows:
# clean: .clean
# To augment the the clean rule
# clean: .clean
# 	rm -rf other-stuff
#
#######################################################################################
include $(REPOROOT)/.make.defaults
ABS_REPOROOT=$(shell (cd $(REPOROOT); pwd))

DOCKER=podman
DOCKER_FILE=Dockerfile
DOCKER_REGISTRY=docker-na.artifactory.swg-devops.com/wcp-ai-foundation-team-docker-virtual
EXTRA_ARTIFACTORY_URL=https://$$ARTIFACTORY_USER:$$ARTIFACTORY_API_KEY@na.artifactory.swg-devops.com/artifactory/api/pypi/res-data-engineering-team-pypi-local/simple
DOCKER_IMAGE_NAME?=$(TRANSFORM_NAME)
# By convention the name of the python file is as follows and contains a main to start the ray-based transform
# This file is used when starting the transformers in the Docker image.
TRANSFORM_SRC_FILE?=$(TRANSFORM_NAME)_transform.py

# The following taken from https://stackoverflow.com/a/65243296/45375
# Lists all targets and optional help text found in the target.
# :: rule means we first run the help from the main make.defaults.
help::	
	@echo ""
	@echo Overridable macro values include the following:
	@echo DOCKER - the name of the docker executable to use.  DOCKER=$(DOCKER)
	@echo DOCKER_FILE - the name of the docker file to use.  DOCKER_FILE=$(DOCKER_FILE)
	@echo DOCKER_REGISTRY - the name of the docker registry to use.  DOCKER_REGISTRY=$(DOCKER_REGISTRY)
	@echo PYTHON - the python executable to use.  PYTHON=$(PYTHON)
	@echo EXTRA_ARTIFACTORY_URL - the url of an additional artifactory to satisfy dependencies.  EXTRA_ARTIFACTORY_URL=$(EXTRA_ARTIFACTORY_URL)
	@echo DOCKER_IMAGE_NAME - the name of the docker image to produce.  DOCKER_IMAGE_NAME=$(DOCKER_IMAGE_NAME)
	@echo TRANSFORM_SRC_FILE is the base name of the python source file containing the main() (e.g. noop_transform.py)
	@echo ""
	@echo Macros that require definition in the including Makefile
	@echo REPOROOT defines root directory of this repository (such as ../../..) 
	@echo TRANSFORM_NAME defines the name of the transform and is used to 
	@echo     define default values of DOCKER_IMAGE_NAME and TRANSFORM_SRC_FILE.  For, example 'noop'
	@echo DOCKER_IMAGE_VERSION - the version of the docker image to produce.  DOCKER_IMAGE_VERSION=$(DOCKER_IMAGE_VERSION)
	@$(MAKE) .transforms.check_required_macros

.PHONY: .transforms.setup
.transforms.setup::
	@# Help:  Do nothing, since nothing to setup by default. 
 

.PHONY: .transforms.check_required_macros
.transforms.check_required_macros::
	@if [ -z "$(DOCKER_IMAGE_NAME)" ]; then		\
	    echo ERROR: DOCKER_IMAGE_NAME is must be defined.;	\
	fi
	@if [ -z "$(DOCKER_IMAGE_VERSION)" ]; then	\
	    echo ERROR: DOCKER_IMAGE_VERSION is must be defined.;	\
	fi			

.PHONY: .transforms.clean
.transforms.clean:: 
	@# Help: Clean up the virtual environment.
	rm -rf venv

# Create the local virtual environment, assuming python is already installed and available
# We upgrade pip as that seems to be required by watson_nlp
# We install wheel, because it seems to be required for fasttext install on redhat.
# We use "pip" instead of "$(PIP)" below because otherwise if the user has overriddent PYTHON
# they will end up installing into that PYTHON and NOT the venv.
.PHONY: .transforms.venv
.transforms.venv::	requirements.txt .check_python_version
	@$(MAKE) .transforms.check_env	# Put this first so we don't get its help
	@# Help: Create the virtual environment using requirements.txt
	$(PYTHON) -m venv venv
	@if [ ! -z "$(EXTRA_ARTIFACTORY_URL)" ]; then				\
	    echo '[global]' > venv/pip.conf;					\
	    echo "extra-index-url = $(EXTRA_ARTIFACTORY_URL)" >> venv/pip.conf;	\
	fi
	@source venv/bin/activate;		\
	pip install --upgrade pip;		\
	pip install wheel;			\
	pip install -r requirements.txt;	\
	pip install pytest;			\

.transforms.check_env::
	@# Help: Make sure Artifactory credentials are in the environment variables. 
	@if [ -z "$(ARTIFACTORY_USER)" -o -z "$(ARTIFACTORY_API_KEY)" ]; then \
		echo "You must set ARTIFACTORY_USER and ARTIFACTORY_API_KEY env vars";\
		exit;									\
	fi

# Create the docker image making sure the preloaded models are available to copy into the image
.transforms.image:: Dockerfile requirements.txt
	$(MAKE) .transforms.check_env	# Put this first so we don't get its help
	@# Help: Build the docker image using the $(DOCKER_FILE) and requirements.txt 
	$(DOCKER) login $(DOCKER_REGISTRY) -u $(ARTIFACTORY_USER) -p $(ARTIFACTORY_API_KEY)
	$(DOCKER) build --build-arg ARTIFACTORY_USER=$(ARTIFACTORY_USER) --build-arg ARTIFACTORY_API_KEY=$(ARTIFACTORY_API_KEY) \
		-f $(DOCKER_FILE) -t $(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_VERSION) .

.PHONY: .transforms.install-lib-src
.transforms.install-lib-src::
	@# Help: Install the source from the data processing library for $(PYTHON) 
	@echo Installing source from data processing library for venv 
	@source venv/bin/activate;					\
	pip uninstall -y fm-data-processing;			\
	pip install 						\
		--extra-index-url $(EXTRA_ARTIFACTORY_URL)		\
		-e $(REPOROOT)/data-processing-lib/;			\
	if [ $$? -eq 0 ]; then	\
		echo Installed source from data processing library for `which $(PYTHON)`;	\
	else \
		echo ERROR installing source into `which $(PYTHON)`;	\
	fi

.transforms.build:: .transforms.venv .transforms.image	

.PHONY: .transforms.test-lib-src
.transforms.test-lib-src::
	@# Help: Run pytest on the test directory with data-processing-lib/src in PYTHONPATH 
	source venv/bin/activate;			\
	export PYTHONPATH=../src:.:$(ABS_REPOROOT)/data-processing-lib/src:$$PYTHONPATH;	\
	cd test; $(PYTEST) . 

.PHONY: .transforms.test # because there is a directory called tests in the projects
.transforms.test::  
	@# Help: Run pytest on the test directory using the current venv
	source venv/bin/activate;			\
	export PYTHONPATH=../src:.:$$PYTHONPATH;	\
	cd test; $(PYTEST) . 


.PHONE: .transforms.test-image
.transforms.test-image::
	@# Help: Test an already-built image (use make image) to be sure the --help option works
	$(DOCKER) run -t $(DOCKER_IMAGE_NAME):$(DOCKER_IMAGE_VERSION) python $(TRANSFORM_SRC_FILE) --help
